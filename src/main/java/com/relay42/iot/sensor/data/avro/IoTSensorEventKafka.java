/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.relay42.iot.sensor.data.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class IoTSensorEventKafka extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6716400181065697175L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"IoTSensorEventKafka\",\"namespace\":\"com.relay42.iot.sensor.data.avro\",\"fields\":[{\"name\":\"eventType\",\"type\":{\"type\":\"enum\",\"name\":\"IoTSensorEventTypeKafka\",\"symbols\":[\"SENSOR_READINGS\"]}},{\"name\":\"iotSensorReadings\",\"type\":[{\"type\":\"record\",\"name\":\"IoTSensorReadings\",\"fields\":[{\"name\":\"sensorId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"sensorType\",\"type\":{\"type\":\"enum\",\"name\":\"SensorType\",\"symbols\":[\"THERMOSTAT\",\"HEART_RATE\",\"CAR_FUEL_LEVEL\"]}},{\"name\":\"readingValue\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":10,\"scale\":4}},{\"name\":\"unit\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"readingAt\",\"type\":\"long\"}]}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<IoTSensorEventKafka> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<IoTSensorEventKafka> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<IoTSensorEventKafka> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<IoTSensorEventKafka> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<IoTSensorEventKafka> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this IoTSensorEventKafka to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a IoTSensorEventKafka from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a IoTSensorEventKafka instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static IoTSensorEventKafka fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private com.relay42.iot.sensor.data.avro.IoTSensorEventTypeKafka eventType;
  private java.lang.Object iotSensorReadings;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public IoTSensorEventKafka() {}

  /**
   * All-args constructor.
   * @param eventType The new value for eventType
   * @param iotSensorReadings The new value for iotSensorReadings
   */
  public IoTSensorEventKafka(com.relay42.iot.sensor.data.avro.IoTSensorEventTypeKafka eventType, java.lang.Object iotSensorReadings) {
    this.eventType = eventType;
    this.iotSensorReadings = iotSensorReadings;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventType;
    case 1: return iotSensorReadings;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventType = (com.relay42.iot.sensor.data.avro.IoTSensorEventTypeKafka)value$; break;
    case 1: iotSensorReadings = value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'eventType' field.
   * @return The value of the 'eventType' field.
   */
  public com.relay42.iot.sensor.data.avro.IoTSensorEventTypeKafka getEventType() {
    return eventType;
  }


  /**
   * Sets the value of the 'eventType' field.
   * @param value the value to set.
   */
  public void setEventType(com.relay42.iot.sensor.data.avro.IoTSensorEventTypeKafka value) {
    this.eventType = value;
  }

  /**
   * Gets the value of the 'iotSensorReadings' field.
   * @return The value of the 'iotSensorReadings' field.
   */
  public java.lang.Object getIotSensorReadings() {
    return iotSensorReadings;
  }


  /**
   * Sets the value of the 'iotSensorReadings' field.
   * @param value the value to set.
   */
  public void setIotSensorReadings(java.lang.Object value) {
    this.iotSensorReadings = value;
  }

  /**
   * Creates a new IoTSensorEventKafka RecordBuilder.
   * @return A new IoTSensorEventKafka RecordBuilder
   */
  public static com.relay42.iot.sensor.data.avro.IoTSensorEventKafka.Builder newBuilder() {
    return new com.relay42.iot.sensor.data.avro.IoTSensorEventKafka.Builder();
  }

  /**
   * Creates a new IoTSensorEventKafka RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new IoTSensorEventKafka RecordBuilder
   */
  public static com.relay42.iot.sensor.data.avro.IoTSensorEventKafka.Builder newBuilder(com.relay42.iot.sensor.data.avro.IoTSensorEventKafka.Builder other) {
    if (other == null) {
      return new com.relay42.iot.sensor.data.avro.IoTSensorEventKafka.Builder();
    } else {
      return new com.relay42.iot.sensor.data.avro.IoTSensorEventKafka.Builder(other);
    }
  }

  /**
   * Creates a new IoTSensorEventKafka RecordBuilder by copying an existing IoTSensorEventKafka instance.
   * @param other The existing instance to copy.
   * @return A new IoTSensorEventKafka RecordBuilder
   */
  public static com.relay42.iot.sensor.data.avro.IoTSensorEventKafka.Builder newBuilder(com.relay42.iot.sensor.data.avro.IoTSensorEventKafka other) {
    if (other == null) {
      return new com.relay42.iot.sensor.data.avro.IoTSensorEventKafka.Builder();
    } else {
      return new com.relay42.iot.sensor.data.avro.IoTSensorEventKafka.Builder(other);
    }
  }

  /**
   * RecordBuilder for IoTSensorEventKafka instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<IoTSensorEventKafka>
    implements org.apache.avro.data.RecordBuilder<IoTSensorEventKafka> {

    private com.relay42.iot.sensor.data.avro.IoTSensorEventTypeKafka eventType;
    private java.lang.Object iotSensorReadings;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.relay42.iot.sensor.data.avro.IoTSensorEventKafka.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventType)) {
        this.eventType = data().deepCopy(fields()[0].schema(), other.eventType);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.iotSensorReadings)) {
        this.iotSensorReadings = data().deepCopy(fields()[1].schema(), other.iotSensorReadings);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing IoTSensorEventKafka instance
     * @param other The existing instance to copy.
     */
    private Builder(com.relay42.iot.sensor.data.avro.IoTSensorEventKafka other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.eventType)) {
        this.eventType = data().deepCopy(fields()[0].schema(), other.eventType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.iotSensorReadings)) {
        this.iotSensorReadings = data().deepCopy(fields()[1].schema(), other.iotSensorReadings);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'eventType' field.
      * @return The value.
      */
    public com.relay42.iot.sensor.data.avro.IoTSensorEventTypeKafka getEventType() {
      return eventType;
    }


    /**
      * Sets the value of the 'eventType' field.
      * @param value The value of 'eventType'.
      * @return This builder.
      */
    public com.relay42.iot.sensor.data.avro.IoTSensorEventKafka.Builder setEventType(com.relay42.iot.sensor.data.avro.IoTSensorEventTypeKafka value) {
      validate(fields()[0], value);
      this.eventType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventType' field has been set.
      * @return True if the 'eventType' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventType' field.
      * @return This builder.
      */
    public com.relay42.iot.sensor.data.avro.IoTSensorEventKafka.Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'iotSensorReadings' field.
      * @return The value.
      */
    public java.lang.Object getIotSensorReadings() {
      return iotSensorReadings;
    }


    /**
      * Sets the value of the 'iotSensorReadings' field.
      * @param value The value of 'iotSensorReadings'.
      * @return This builder.
      */
    public com.relay42.iot.sensor.data.avro.IoTSensorEventKafka.Builder setIotSensorReadings(java.lang.Object value) {
      validate(fields()[1], value);
      this.iotSensorReadings = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'iotSensorReadings' field has been set.
      * @return True if the 'iotSensorReadings' field has been set, false otherwise.
      */
    public boolean hasIotSensorReadings() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'iotSensorReadings' field.
      * @return This builder.
      */
    public com.relay42.iot.sensor.data.avro.IoTSensorEventKafka.Builder clearIotSensorReadings() {
      iotSensorReadings = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public IoTSensorEventKafka build() {
      try {
        IoTSensorEventKafka record = new IoTSensorEventKafka();
        record.eventType = fieldSetFlags()[0] ? this.eventType : (com.relay42.iot.sensor.data.avro.IoTSensorEventTypeKafka) defaultValue(fields()[0]);
        record.iotSensorReadings = fieldSetFlags()[1] ? this.iotSensorReadings :  defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<IoTSensorEventKafka>
    WRITER$ = (org.apache.avro.io.DatumWriter<IoTSensorEventKafka>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<IoTSensorEventKafka>
    READER$ = (org.apache.avro.io.DatumReader<IoTSensorEventKafka>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










